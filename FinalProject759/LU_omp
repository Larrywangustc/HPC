#include <iostream>
#include <omp.h>

// Matrix size
const int N = 1024;

// Matrix to be decomposed
double A[N][N];

// Lower and upper triangular matrices
double L[N][N], U[N][N];

int main() {
  // Initialize matrix A with some values
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      A[i][j] = (double)i + j;
    }
  }

  // Set number of threads to use
  omp_set_num_threads(8);

  // Perform LU decomposition in parallel
  #pragma omp parallel for
  for (int k = 0; k < N; k++) {
    // Compute upper triangular matrix
    for (int i = k; i < N; i++) {
      double sum = 0;
      for (int p = 0; p < k; p++) {
        sum += L[k][p] * U[p][i];
      }
      U[k][i] = A[k][i] - sum;
    }

    // Compute lower triangular matrix
    for (int i = k + 1; i < N; i++) {
      double sum = 0;
      for (int p = 0; p < k; p++) {
        sum += L[i][p] * U[p][k];
      }
      L[i][k] = (A[i][k] - sum) / U[k][k];
    }
  }

  // Print result
  std::cout << "L = " << std::endl;
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      std::cout << L[i][j] << " ";
    }
    std::cout << std::endl;
  }

  std::cout << "U = " << std::endl;
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++) {
      std::cout << U[i][j] << " ";
    }
    std::cout << std::endl;
  }

  return 0;
}